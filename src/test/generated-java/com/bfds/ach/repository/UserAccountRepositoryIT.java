/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
 */
package com.bfds.ach.repository;

import static com.google.common.collect.Sets.newHashSet;
import static org.fest.assertions.Assertions.assertThat;

import java.util.Set;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import com.bfds.ach.domain.UserAccount;
import com.bfds.ach.repository.UserAccountGenerator;
import com.bfds.ach.repository.UserAccountRepository;

/**
 * Integration test on UserAccountRepository
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
@Transactional
public class UserAccountRepositoryIT {
    @SuppressWarnings("unused")
    private static final Logger log = LoggerFactory.getLogger(UserAccountRepositoryIT.class);

    @PersistenceContext
    private EntityManager entityManager;

    @Inject
    private UserAccountRepository userAccountRepository;

    @Inject
    private UserAccountGenerator userAccountGenerator;

    @Test
    @Rollback
    public void saveAndGet() {
        UserAccount userAccount = userAccountGenerator.getUserAccount();

        // add it to a Set before saving (force equals/hashcode)
        Set<UserAccount> set = newHashSet(userAccount, userAccount);
        assertThat(set).hasSize(1);

        userAccountRepository.save(userAccount);
        entityManager.flush();

        // reload it from cache and check equality
        UserAccount model = new UserAccount();
        model.setId(userAccount.getId());
        assertThat(userAccount).isEqualTo(userAccountRepository.get(model));

        // clear cache to force reload from db
        entityManager.clear();

        // pk are equals...
        assertThat(userAccount.getId()).isEqualTo(userAccountRepository.get(model).getId());

        // but since you do not use a business key, equality is lost.
        assertThat(userAccount).isNotEqualTo(userAccountRepository.get(model));
    }
}