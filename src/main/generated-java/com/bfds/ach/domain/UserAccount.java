/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
 */
package com.bfds.ach.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.bfds.ach.domain.IdentifiableHashBuilder;
import com.bfds.ach.domain.UserRole;
import com.google.common.base.Objects;

@Entity
@Table(name = "user_account")
public class UserAccount implements Identifiable<Long>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(UserAccount.class);

    // Raw attributes
    private Long id;
    private String password;
    private String userName;
    private Integer version;

    // Many to many
    private List<UserRole> roles = new ArrayList<UserRole>();

    // -- [id] ------------------------

    @Override
    @Column(name = "id", precision = 19)
    @GeneratedValue
    @Id
    public Long getId() {
        return id;
    }

    @Override
    public void setId(Long id) {
        this.id = id;
    }

    public UserAccount id(Long id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [password] ------------------------

    @Size(max = 255)
    @Column(name = "`password`")
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public UserAccount password(String password) {
        setPassword(password);
        return this;
    }

    // -- [userName] ------------------------

    @Size(max = 255)
    @Column(name = "user_name")
    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public UserAccount userName(String userName) {
        setUserName(userName);
        return this;
    }

    // -- [version] ------------------------

    @Column(name = "version", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public UserAccount version(Integer version) {
        setVersion(version);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to Many
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // many-to-many: userAccount ==> roles
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    /**
     * Returns the {@link #roles} list.
     */
    @JoinTable(name = "user_account_roles", joinColumns = @JoinColumn(name = "user_account"), inverseJoinColumns = @JoinColumn(name = "`role`"))
    @ManyToMany(cascade = { PERSIST, MERGE })
    public List<UserRole> getRoles() {
        return roles;
    }

    /**
     * Set the {@link #roles} list.
     *
     * @param roles the list of UserRole
     */
    public void setRoles(List<UserRole> roles) {
        this.roles = roles;
    }

    /**
     * Helper method to add the passed {@link UserRole} to the {@link #roles} list.
     */
    public boolean addRole(UserRole role) {
        return getRoles().add(role);
    }

    /**
     * Helper method to remove the passed {@link UserRole} from the {@link #roles} list.
     */
    public boolean removeRole(UserRole role) {
        return getRoles().remove(role);
    }

    /**
     * Helper method to determine if the passed {@link UserRole} is present in the {@link #roles} list.
     */
    public boolean containsRole(UserRole role) {
        return getRoles() != null && getRoles().contains(role);
    }

    /**
     * Apply the default values.
     */
    public UserAccount withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof UserAccount && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this UserAccount instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("id", getId()) //
                .add("password", "XXXX") //
                .add("userName", getUserName()) //
                .add("version", getVersion()) //
                .toString();
    }
}