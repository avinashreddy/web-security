/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package com.bfds.ach.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;

import com.bfds.ach.domain.UserAccount;
import com.bfds.ach.domain.UserAccount_;
import com.bfds.ach.domain.UserRole;
import com.bfds.ach.repository.UserAccountRepository;
import com.bfds.ach.web.domain.UserAccountController;
import com.bfds.ach.web.domain.UserAccountGraphLoader;
import com.bfds.ach.web.domain.UserRoleController;
import com.bfds.ach.web.domain.support.GenericEditForm;
import com.bfds.ach.web.domain.support.GenericToManyAssociation;
import com.bfds.ach.web.faces.ConversationContextScoped;
import com.bfds.ach.web.util.TabBean;

/**
 * View Helper/Controller to edit {@link UserAccount}.
 */
@Named
@ConversationContextScoped
public class UserAccountEditForm extends GenericEditForm<UserAccount, Long> {
    @Inject
    protected UserAccountController userAccountController;
    @Inject
    protected UserRoleController userRoleController;
    protected GenericToManyAssociation<UserRole, Long> roles;
    protected TabBean tabBean = new TabBean();

    @Inject
    public UserAccountEditForm(UserAccountRepository userAccountRepository, UserAccountGraphLoader userAccountGraphLoader) {
        super(userAccountRepository, userAccountGraphLoader);
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    @Override
    public TabBean getTabBean() {
        return tabBean;
    }

    /**
     * The entity to edit/view.
     */
    public UserAccount getUserAccount() {
        return getEntity();
    }

    public String print() {
        return userAccountController.print(getUserAccount());
    }

    @PostConstruct
    void setupRolesActions() {
        roles = new GenericToManyAssociation<UserRole, Long>(getUserAccount().getRoles(), userRoleController, UserAccount_.roles) {
            @Override
            protected void remove(UserRole userRole) {
                getUserAccount().removeRole(userRole);
            }

            @Override
            protected void add(UserRole userRole) {
                // add the object only to the role side of the relation 
                getUserAccount().getRoles().add(userRole);
            }
        };
    }

    public GenericToManyAssociation<UserRole, Long> getRoles() {
        return roles;
    }
}
